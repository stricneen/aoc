-module(day12).
-export([run/0]).

run() ->

    TPlants = ".....#..#.#..##......###...###.....",
    TTrans = dict:from_list([{"...##", "#"},
            {"#.#.#", "#"},
            {".###.", "."},
            {"#.#..", "."},
            {".#..#", "."},
            {"#..#.", "."},
            {"..##.", "."},
            {"....#", "."},
            {"#....", "."},
            {"###..", "#"},
            {".####", "#"},
            {"###.#", "#"},
            {"#..##", "."},
            {".....", "."},
            {"##.##", "#"},
            {"####.", "#"},
            {"##.#.", "#"},
            {"#...#", "."},
            {"#####", "."},
            {"..#..", "#"},
            {".#.#.", "#"},
            {"#.###", "#"},
            {".##.#", "."},%
            {"..#.#", "."},
            {".#.##", "#"},
            {"...#.", "."},
            {"##...", "."},
            {"##..#", "."},
            {".##..", "#"},
            {".#...", "#"},
            {"#.##.", "."},
            {"..###", "."}]),

    Plants = ".....##.#.#.##..#....######..#..#...#.#..#.#.#..###.#.#.#..#..###.##.#..#.##.##.#.####..##...##..#..##.#...",
    Trans = dict:from_list([{"...##", "#"},
            {"#.#.#", "#"},
            {".###.", "#"},
            {"#.#..", "."},
            {".#..#", "#"},
            {"#..#.", "#"},
            {"..##.", "."},
            {"....#", "."},
            {"#....", "."},
            {"###..", "#"},
            {".####", "#"},
            {"###.#", "."},
            {"#..##", "#"},
            {".....", "."},
            {"##.##", "#"},
            {"####.", "."},
            {"##.#.", "."},
            {"#...#", "."},
            {"#####", "."},
            {"..#..", "."},
            {".#.#.", "."},
            {"#.###", "."},
            {".##.#", "."},
            {"..#.#", "."},
            {".#.##", "#"},
            {"...#.", "."},
            {"##...", "#"},
            {"##..#", "#"},
            {".##..", "."},
            {".#...", "#"},
            {"#.##.", "#"},
            {"..###", "."}]),

        %io:format("~p~n", [Plants]),
        %io:format("~p~n", [Trans]),
    
    
    
    
    
    io:format("~p~n", [Plants]),

    %Gen = gen(Plants,Trans, 19),
    Gen = gen(Plants,Trans, 19),
    %io:format("~p~n~n", [Gen]),
    io:format("Part 1 : ~p~n", [score(Gen)])
.

score(L) ->
    {_,Scoring} = lists:split(2, L),
    Offset = -3,

    Scores = lists:zipwith(fun(S,V) -> 
        R = case S of 
            35 -> V;
            _ -> 0
        end,
       R end,
      Scoring, lists:seq(Offset, length(Scoring)+Offset-1)),

    io:format("~p~n", [Scores]),
    lists:sum(Scores).


% 1677 tl 2119

% th 2206

gen(Plants, Trans, C) -> 
     Folder = fun(Plant, N) ->
        {_,I} = lists:split(Plant, Plants),
        N ++ dict:fetch(element(1, lists:split(5,I)), Trans)
    end,

    Gen = lists:foldl(
        Folder,
        "..",
        lists:seq(0, length(Plants)-5) ) ++ "...",
    
    io:format("~p~n", [Gen]),
    
    case C of 
        0 -> Gen;
        _ -> gen(Gen, Trans, C-1)
    end.
    
    



